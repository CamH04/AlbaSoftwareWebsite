{"ast":null,"code":"/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport { whitespace } from 'hast-util-whitespace';\nimport { siblingAfter, siblingBefore } from './util/siblings.js';\nimport { closing } from './closing.js';\nimport { omission } from './omission.js';\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1);\n  return !head || head.type !== 'comment';\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set();\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (child.type === 'element' && (child.tagName === 'base' || child.tagName === 'title')) {\n      if (seen.has(child.tagName)) return false;\n      seen.add(child.tagName);\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0];\n  return !child || child.type === 'element';\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true);\n  return !head || head.type !== 'comment' && !(head.type === 'text' && whitespace(head.value.charAt(0))) && !(head.type === 'element' && (head.tagName === 'meta' || head.tagName === 'link' || head.tagName === 'script' || head.tagName === 'style' || head.tagName === 'template'));\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (parent && previous && previous.type === 'element' && previous.tagName === 'colgroup' && closing(previous, parent.children.indexOf(previous), parent)) {\n    return false;\n  }\n  return Boolean(head && head.type === 'element' && head.tagName === 'col');\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (parent && previous && previous.type === 'element' && (previous.tagName === 'thead' || previous.tagName === 'tbody') && closing(previous, parent.children.indexOf(previous), parent)) {\n    return false;\n  }\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr');\n}","map":{"version":3,"names":["whitespace","siblingAfter","siblingBefore","closing","omission","opening","body","colgroup","head","html","tbody","node","type","seen","Set","child","children","tagName","has","add","value","charAt","index","parent","previous","indexOf","Boolean"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/hast-util-to-html/lib/omission/opening.js"],"sourcesContent":["/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter, siblingBefore} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set()\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'base' || child.tagName === 'title')\n    ) {\n      if (seen.has(child.tagName)) return false\n      seen.add(child.tagName)\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0]\n  return !child || child.type === 'element'\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,UAAU,QAAO,sBAAsB;AAC/C,SAAQC,YAAY,EAAEC,aAAa,QAAO,oBAAoB;AAC9D,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,QAAQ,QAAO,eAAe;AAEtC,OAAO,MAAMC,OAAO,GAAGD,QAAQ,CAAC;EAC9BE,IAAI;EACJC,QAAQ;EACRC,IAAI;EACJC,IAAI;EACJC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,IAAIA,CAACE,IAAI,EAAE;EAClB,MAAMH,IAAI,GAAGP,YAAY,CAACU,IAAI,EAAE,CAAC,CAAC,CAAC;EACnC,OAAO,CAACH,IAAI,IAAIA,IAAI,CAACI,IAAI,KAAK,SAAS;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,IAAIA,CAACG,IAAI,EAAE;EAClB;EACA,MAAME,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEtB;EACA;EACA,KAAK,MAAMC,KAAK,IAAIJ,IAAI,CAACK,QAAQ,EAAE;IACjC,IACED,KAAK,CAACH,IAAI,KAAK,SAAS,KACvBG,KAAK,CAACE,OAAO,KAAK,MAAM,IAAIF,KAAK,CAACE,OAAO,KAAK,OAAO,CAAC,EACvD;MACA,IAAIJ,IAAI,CAACK,GAAG,CAACH,KAAK,CAACE,OAAO,CAAC,EAAE,OAAO,KAAK;MACzCJ,IAAI,CAACM,GAAG,CAACJ,KAAK,CAACE,OAAO,CAAC;IACzB;EACF;;EAEA;EACA;EACA,MAAMF,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC;EAC9B,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACH,IAAI,KAAK,SAAS;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,IAAIA,CAACK,IAAI,EAAE;EAClB,MAAMH,IAAI,GAAGP,YAAY,CAACU,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;EAEzC,OACE,CAACH,IAAI,IACJA,IAAI,CAACI,IAAI,KAAK,SAAS,IACtB,EAAEJ,IAAI,CAACI,IAAI,KAAK,MAAM,IAAIZ,UAAU,CAACQ,IAAI,CAACY,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAC3D,EACEb,IAAI,CAACI,IAAI,KAAK,SAAS,KACtBJ,IAAI,CAACS,OAAO,KAAK,MAAM,IACtBT,IAAI,CAACS,OAAO,KAAK,MAAM,IACvBT,IAAI,CAACS,OAAO,KAAK,QAAQ,IACzBT,IAAI,CAACS,OAAO,KAAK,OAAO,IACxBT,IAAI,CAACS,OAAO,KAAK,UAAU,CAAC,CAC9B;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,QAAQA,CAACI,IAAI,EAAEW,KAAK,EAAEC,MAAM,EAAE;EACrC,MAAMC,QAAQ,GAAGtB,aAAa,CAACqB,MAAM,EAAED,KAAK,CAAC;EAC7C,MAAMd,IAAI,GAAGP,YAAY,CAACU,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;;EAEzC;EACA,IACEY,MAAM,IACNC,QAAQ,IACRA,QAAQ,CAACZ,IAAI,KAAK,SAAS,IAC3BY,QAAQ,CAACP,OAAO,KAAK,UAAU,IAC/Bd,OAAO,CAACqB,QAAQ,EAAED,MAAM,CAACP,QAAQ,CAACS,OAAO,CAACD,QAAQ,CAAC,EAAED,MAAM,CAAC,EAC5D;IACA,OAAO,KAAK;EACd;EAEA,OAAOG,OAAO,CAAClB,IAAI,IAAIA,IAAI,CAACI,IAAI,KAAK,SAAS,IAAIJ,IAAI,CAACS,OAAO,KAAK,KAAK,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,KAAKA,CAACC,IAAI,EAAEW,KAAK,EAAEC,MAAM,EAAE;EAClC,MAAMC,QAAQ,GAAGtB,aAAa,CAACqB,MAAM,EAAED,KAAK,CAAC;EAC7C,MAAMd,IAAI,GAAGP,YAAY,CAACU,IAAI,EAAE,CAAC,CAAC,CAAC;;EAEnC;EACA,IACEY,MAAM,IACNC,QAAQ,IACRA,QAAQ,CAACZ,IAAI,KAAK,SAAS,KAC1BY,QAAQ,CAACP,OAAO,KAAK,OAAO,IAAIO,QAAQ,CAACP,OAAO,KAAK,OAAO,CAAC,IAC9Dd,OAAO,CAACqB,QAAQ,EAAED,MAAM,CAACP,QAAQ,CAACS,OAAO,CAACD,QAAQ,CAAC,EAAED,MAAM,CAAC,EAC5D;IACA,OAAO,KAAK;EACd;EAEA,OAAOG,OAAO,CAAClB,IAAI,IAAIA,IAAI,CAACI,IAAI,KAAK,SAAS,IAAIJ,IAAI,CAACS,OAAO,KAAK,IAAI,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}