{"ast":null,"code":"/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","subtokenize","content","resolve","resolveContent","tokenize","tokenizeContent","continuationConstruct","partial","tokenizeContinuation","events","effects","ok","previous","chunkStart","code","enter","contentType","chunkInside","contentEnd","check","contentContinue","consume","exit","next","nok","self","startLookahead","prefixed","tail","length","parser","constructs","disable","null","includes","type","sliceSerialize","interrupt","flow"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/micromark-core-commonmark/lib/content.js"],"sourcesContent":["/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}