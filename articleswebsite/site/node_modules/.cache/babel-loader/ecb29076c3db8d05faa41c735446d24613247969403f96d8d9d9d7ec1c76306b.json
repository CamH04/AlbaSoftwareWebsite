{"ast":null,"code":"const hexadecimalRegex = /[\\dA-Fa-f]/;\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next)) ? value : value + ';';\n}","map":{"version":3,"names":["hexadecimalRegex","toHexadecimal","code","next","omit","value","toString","toUpperCase","test","String","fromCharCode"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/stringify-entities/lib/util/to-hexadecimal.js"],"sourcesContent":["const hexadecimalRegex = /[\\dA-Fa-f]/\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,YAAY;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC9C,MAAMC,KAAK,GAAG,KAAK,GAAGH,IAAI,CAACI,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EACrD,OAAOH,IAAI,IAAID,IAAI,IAAI,CAACH,gBAAgB,CAACQ,IAAI,CAACC,MAAM,CAACC,YAAY,CAACP,IAAI,CAAC,CAAC,GACpEE,KAAK,GACLA,KAAK,GAAG,GAAG;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}