{"ast":null,"code":"/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(state.options.fences === false && node.value &&\n  // If there’s no info…\n  !node.lang &&\n  // And there’s a non-whitespace character…\n  /[^ \\r\\n]/.test(node.value) &&\n  // And the value doesn’t start or end in a blank…\n  !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value));\n}","map":{"version":3,"names":["formatCodeAsIndented","node","state","Boolean","options","fences","value","lang","test"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js"],"sourcesContent":["/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAoBA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAChD,OAAOC,OAAO,CACZD,KAAK,CAACE,OAAO,CAACC,MAAM,KAAK,KAAK,IAC5BJ,IAAI,CAACK,KAAK;EACV;EACA,CAACL,IAAI,CAACM,IAAI;EACV;EACA,UAAU,CAACC,IAAI,CAACP,IAAI,CAACK,KAAK,CAAC;EAC3B;EACA,CAAC,yCAAyC,CAACE,IAAI,CAACP,IAAI,CAACK,KAAK,CAC9D,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}