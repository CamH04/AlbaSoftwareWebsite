{"ast":null,"code":"/**\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('hast-util-to-html').Options} ToHtmlOptions\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-hast').Handlers} Handlers\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef ExtraOptionsFields\n *   Extra fields.\n * @property {Readonly<Handlers> | null | undefined} [handlers]\n *   How to turn mdast nodes into hast nodes (optional);\n *   passed to `mdast-util-to-hast`.\n * @property {Readonly<Schema> | boolean | null | undefined} [sanitize]\n *   Sanitize the output, and how (default: `true`).\n *\n * @typedef {ToHtmlOptions & ExtraOptionsFields} Options\n *   Configuration.\n */\n\nimport { sanitize } from 'hast-util-sanitize';\nimport { toHast } from 'mdast-util-to-hast';\nimport { toHtml } from 'hast-util-to-html';\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {};\n\n/**\n * Serialize markdown as HTML.\n *\n * ###### Notes\n *\n * Passing `sanitize: false` is dangerous.\n * It allows arbitrary HTML and does not sanitize elements.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkHtml(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = this;\n  const {\n    handlers,\n    sanitize: clean,\n    ...toHtmlOptions\n  } = options || emptyOptions;\n  let allowDangerousHtml = false;\n  /** @type {Readonly<Schema> | undefined} */\n  let schema;\n  if (typeof clean === 'boolean') {\n    allowDangerousHtml = !clean;\n  } else if (clean) {\n    schema = clean;\n  }\n  self.compiler = compiler;\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree, file) {\n    const hast = toHast(tree, {\n      handlers,\n      allowDangerousHtml\n    });\n    const safeHast = allowDangerousHtml ? hast : sanitize(hast, schema);\n    const result = toHtml(safeHast, {\n      ...toHtmlOptions,\n      allowDangerousHtml\n    });\n    if (file.extname) {\n      file.extname = '.html';\n    }\n\n    // Add an eof eol.\n    return tree && tree.type === 'root' && result && /[^\\r\\n]/.test(result.charAt(result.length - 1)) ? result + '\\n' : result;\n  }\n}","map":{"version":3,"names":["sanitize","toHast","toHtml","emptyOptions","remarkHtml","options","self","handlers","clean","toHtmlOptions","allowDangerousHtml","schema","compiler","tree","file","hast","safeHast","result","extname","type","test","charAt","length"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/remark-html/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('hast-util-to-html').Options} ToHtmlOptions\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-hast').Handlers} Handlers\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef ExtraOptionsFields\n *   Extra fields.\n * @property {Readonly<Handlers> | null | undefined} [handlers]\n *   How to turn mdast nodes into hast nodes (optional);\n *   passed to `mdast-util-to-hast`.\n * @property {Readonly<Schema> | boolean | null | undefined} [sanitize]\n *   Sanitize the output, and how (default: `true`).\n *\n * @typedef {ToHtmlOptions & ExtraOptionsFields} Options\n *   Configuration.\n */\n\nimport {sanitize} from 'hast-util-sanitize'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Serialize markdown as HTML.\n *\n * ###### Notes\n *\n * Passing `sanitize: false` is dangerous.\n * It allows arbitrary HTML and does not sanitize elements.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkHtml(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = this\n  const {handlers, sanitize: clean, ...toHtmlOptions} = options || emptyOptions\n  let allowDangerousHtml = false\n  /** @type {Readonly<Schema> | undefined} */\n  let schema\n\n  if (typeof clean === 'boolean') {\n    allowDangerousHtml = !clean\n  } else if (clean) {\n    schema = clean\n  }\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree, file) {\n    const hast = toHast(tree, {handlers, allowDangerousHtml})\n    const safeHast = allowDangerousHtml ? hast : sanitize(hast, schema)\n    const result = toHtml(safeHast, {...toHtmlOptions, allowDangerousHtml})\n\n    if (file.extname) {\n      file.extname = '.html'\n    }\n\n    // Add an eof eol.\n    return tree &&\n      tree.type === 'root' &&\n      result &&\n      /[^\\r\\n]/.test(result.charAt(result.length - 1))\n      ? result + '\\n'\n      : result\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,oBAAoB;AAC3C,SAAQC,MAAM,QAAO,oBAAoB;AACzC,SAAQC,MAAM,QAAO,mBAAmB;;AAExC;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,OAAO,EAAE;EAC1C;EACA;EACA;EACA,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAM;IAACC,QAAQ;IAAEP,QAAQ,EAAEQ,KAAK;IAAE,GAAGC;EAAa,CAAC,GAAGJ,OAAO,IAAIF,YAAY;EAC7E,IAAIO,kBAAkB,GAAG,KAAK;EAC9B;EACA,IAAIC,MAAM;EAEV,IAAI,OAAOH,KAAK,KAAK,SAAS,EAAE;IAC9BE,kBAAkB,GAAG,CAACF,KAAK;EAC7B,CAAC,MAAM,IAAIA,KAAK,EAAE;IAChBG,MAAM,GAAGH,KAAK;EAChB;EAEAF,IAAI,CAACM,QAAQ,GAAGA,QAAQ;;EAExB;AACF;AACA;EACE,SAASA,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC5B,MAAMC,IAAI,GAAGd,MAAM,CAACY,IAAI,EAAE;MAACN,QAAQ;MAAEG;IAAkB,CAAC,CAAC;IACzD,MAAMM,QAAQ,GAAGN,kBAAkB,GAAGK,IAAI,GAAGf,QAAQ,CAACe,IAAI,EAAEJ,MAAM,CAAC;IACnE,MAAMM,MAAM,GAAGf,MAAM,CAACc,QAAQ,EAAE;MAAC,GAAGP,aAAa;MAAEC;IAAkB,CAAC,CAAC;IAEvE,IAAII,IAAI,CAACI,OAAO,EAAE;MAChBJ,IAAI,CAACI,OAAO,GAAG,OAAO;IACxB;;IAEA;IACA,OAAOL,IAAI,IACTA,IAAI,CAACM,IAAI,KAAK,MAAM,IACpBF,MAAM,IACN,SAAS,CAACG,IAAI,CAACH,MAAM,CAACI,MAAM,CAACJ,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,GAC9CL,MAAM,GAAG,IAAI,GACbA,MAAM;EACZ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}