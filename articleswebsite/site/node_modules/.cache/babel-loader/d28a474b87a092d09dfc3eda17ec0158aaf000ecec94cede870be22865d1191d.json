{"ast":null,"code":"/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = ['autolink', 'destinationLiteral', 'destinationRaw', 'reference', 'titleQuote', 'titleApostrophe'];\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [{\n  character: '\\t',\n  after: '[\\\\r\\\\n]',\n  inConstruct: 'phrasing'\n}, {\n  character: '\\t',\n  before: '[\\\\r\\\\n]',\n  inConstruct: 'phrasing'\n}, {\n  character: '\\t',\n  inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n}, {\n  character: '\\r',\n  inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde', 'codeFencedMetaGraveAccent', 'codeFencedMetaTilde', 'destinationLiteral', 'headingAtx']\n}, {\n  character: '\\n',\n  inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde', 'codeFencedMetaGraveAccent', 'codeFencedMetaTilde', 'destinationLiteral', 'headingAtx']\n}, {\n  character: ' ',\n  after: '[\\\\r\\\\n]',\n  inConstruct: 'phrasing'\n}, {\n  character: ' ',\n  before: '[\\\\r\\\\n]',\n  inConstruct: 'phrasing'\n}, {\n  character: ' ',\n  inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n},\n// An exclamation mark can start an image, if it is followed by a link or\n// a link reference.\n{\n  character: '!',\n  after: '\\\\[',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n},\n// A quote can break out of a title.\n{\n  character: '\"',\n  inConstruct: 'titleQuote'\n},\n// A number sign could start an ATX heading if it starts a line.\n{\n  atBreak: true,\n  character: '#'\n}, {\n  character: '#',\n  inConstruct: 'headingAtx',\n  after: '(?:[\\r\\n]|$)'\n},\n// Dollar sign and percentage are not used in markdown.\n// An ampersand could start a character reference.\n{\n  character: '&',\n  after: '[#A-Za-z]',\n  inConstruct: 'phrasing'\n},\n// An apostrophe can break out of a title.\n{\n  character: \"'\",\n  inConstruct: 'titleApostrophe'\n},\n// A left paren could break out of a destination raw.\n{\n  character: '(',\n  inConstruct: 'destinationRaw'\n},\n// A left paren followed by `]` could make something into a link or image.\n{\n  before: '\\\\]',\n  character: '(',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n},\n// A right paren could start a list item or break out of a destination\n// raw.\n{\n  atBreak: true,\n  before: '\\\\d+',\n  character: ')'\n}, {\n  character: ')',\n  inConstruct: 'destinationRaw'\n},\n// An asterisk can start thematic breaks, list items, emphasis, strong.\n{\n  atBreak: true,\n  character: '*',\n  after: '(?:[ \\t\\r\\n*])'\n}, {\n  character: '*',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n},\n// A plus sign could start a list item.\n{\n  atBreak: true,\n  character: '+',\n  after: '(?:[ \\t\\r\\n])'\n},\n// A dash can start thematic breaks, list items, and setext heading\n// underlines.\n{\n  atBreak: true,\n  character: '-',\n  after: '(?:[ \\t\\r\\n-])'\n},\n// A dot could start a list item.\n{\n  atBreak: true,\n  before: '\\\\d+',\n  character: '.',\n  after: '(?:[ \\t\\r\\n]|$)'\n},\n// Slash, colon, and semicolon are not used in markdown for constructs.\n// A less than can start html (flow or text) or an autolink.\n// HTML could start with an exclamation mark (declaration, cdata, comment),\n// slash (closing tag), question mark (instruction), or a letter (tag).\n// An autolink also starts with a letter.\n// Finally, it could break out of a destination literal.\n{\n  atBreak: true,\n  character: '<',\n  after: '[!/?A-Za-z]'\n}, {\n  character: '<',\n  after: '[!/?A-Za-z]',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n}, {\n  character: '<',\n  inConstruct: 'destinationLiteral'\n},\n// An equals to can start setext heading underlines.\n{\n  atBreak: true,\n  character: '='\n},\n// A greater than can start block quotes and it can break out of a\n// destination literal.\n{\n  atBreak: true,\n  character: '>'\n}, {\n  character: '>',\n  inConstruct: 'destinationLiteral'\n},\n// Question mark and at sign are not used in markdown for constructs.\n// A left bracket can start definitions, references, labels,\n{\n  atBreak: true,\n  character: '['\n}, {\n  character: '[',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n}, {\n  character: '[',\n  inConstruct: ['label', 'reference']\n},\n// A backslash can start an escape (when followed by punctuation) or a\n// hard break (when followed by an eol).\n// Note: typical escapes are handled in `safe`!\n{\n  character: '\\\\',\n  after: '[\\\\r\\\\n]',\n  inConstruct: 'phrasing'\n},\n// A right bracket can exit labels.\n{\n  character: ']',\n  inConstruct: ['label', 'reference']\n},\n// Caret is not used in markdown for constructs.\n// An underscore can start emphasis, strong, or a thematic break.\n{\n  atBreak: true,\n  character: '_'\n}, {\n  character: '_',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n},\n// A grave accent can start code (fenced or text), or it can break out of\n// a grave accent code fence.\n{\n  atBreak: true,\n  character: '`'\n}, {\n  character: '`',\n  inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n}, {\n  character: '`',\n  inConstruct: 'phrasing',\n  notInConstruct: fullPhrasingSpans\n},\n// Left brace, vertical bar, right brace are not used in markdown for\n// constructs.\n// A tilde can start code (fenced).\n{\n  atBreak: true,\n  character: '~'\n}];","map":{"version":3,"names":["fullPhrasingSpans","unsafe","character","after","inConstruct","before","notInConstruct","atBreak"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/mdast-util-to-markdown/lib/unsafe.js"],"sourcesContent":["/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}