{"ast":null,"code":"import _objectSpread from \"/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @import {\n *   CompileContext,\n *   CompileData,\n *   CompileOptions,\n *   Compile,\n *   Definition,\n *   Event,\n *   Handle,\n *   HtmlExtension,\n *   LineEnding,\n *   NormalizedHtmlExtension,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef Media\n * @property {boolean | undefined} [image]\n * @property {string | undefined} [labelId]\n * @property {string | undefined} [label]\n * @property {string | undefined} [referenceId]\n * @property {string | undefined} [destination]\n * @property {string | undefined} [title]\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { push } from 'micromark-util-chunked';\nimport { combineHtmlExtensions } from 'micromark-util-combine-extensions';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { encode as _encode } from 'micromark-util-encode';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i;\nconst protocolSource = /^https?$/i;\n\n/**\n * @param {CompileOptions | null | undefined} [options]\n * @returns {Compile}\n */\nexport function compile(options) {\n  const settings = options || {};\n\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean | undefined}\n   */\n  let tags = true;\n\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n  const definitions = {};\n\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n  const buffers = [[]];\n\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n  const mediaStack = [];\n\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n  const tightStack = [];\n\n  /** @type {HtmlExtension} */\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onresumedrop,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: onresumedrop,\n      referenceString: onexitreferencestring,\n      resource: onresumedrop,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  };\n\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   */\n  const handlers = /** @type {NormalizedHtmlExtension} */\n  combineHtmlExtensions([defaultHandlers, ...(settings.htmlExtensions || [])]);\n\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n  const data = {\n    definitions,\n    tightStack\n  };\n\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n  const context = {\n    buffer,\n    encode,\n    getData,\n    lineEndingIfNeeded,\n    options: settings,\n    raw,\n    resume,\n    setData,\n    tag\n  };\n\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n  let lineEndingStyle = settings.defaultLineEnding;\n\n  // Return the function that handles a slice of events.\n  return compile;\n\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {ReadonlyArray<Event>} events\n   * @returns {string}\n   */\n  function compile(events) {\n    let index = -1;\n    let start = 0;\n    /** @type {Array<number>} */\n    const listStack = [];\n    // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n    /** @type {Array<Event>} */\n    let head = [];\n    /** @type {Array<Event>} */\n    let body = [];\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (!lineEndingStyle && (events[index][1].type === \"lineEnding\" || events[index][1].type === \"lineEndingBlank\")) {\n        lineEndingStyle = /** @type {LineEnding} */\n        events[index][2].sliceSerialize(events[index][1]);\n      }\n\n      // Preprocess lists to infer whether the list is loose or not.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          prepareList(events.slice(listStack.pop(), index));\n        }\n      }\n\n      // Move definitions to the front.\n      if (events[index][1].type === \"definition\") {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index));\n          start = index;\n        } else {\n          head = push(head, events.slice(start, index + 1));\n          start = index + 1;\n        }\n      }\n    }\n    head = push(head, body);\n    head = push(head, events.slice(start));\n    index = -1;\n    const result = head;\n\n    // Handle the start of the document, if defined.\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context);\n    }\n\n    // Handle all events.\n    while (++index < events.length) {\n      const handles = handlers[result[index][0]];\n      const kind = result[index][1].type;\n      const handle = handles[kind];\n      if (hasOwnProperty.call(handles, kind) && handle) {\n        handle.call(_objectSpread({\n          sliceSerialize: result[index][2].sliceSerialize\n        }, context), result[index][1]);\n      }\n    }\n\n    // Handle the end of the document, if defined.\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context);\n    }\n    return buffers[0].join('');\n  }\n\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {ReadonlyArray<Event>} slice\n   * @returns {undefined}\n   */\n  function prepareList(slice) {\n    const length = slice.length;\n    let index = 0; // Skip open.\n    let containerBalance = 0;\n    let loose = false;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index < length) {\n      const event = slice[index];\n      if (event[1]._container) {\n        atMarker = undefined;\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n      } else switch (event[1].type) {\n        case \"listItemPrefix\":\n          {\n            if (event[0] === 'exit') {\n              atMarker = true;\n            }\n            break;\n          }\n        case \"linePrefix\":\n          {\n            // Ignore\n\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined;\n              } else {\n                loose = true;\n              }\n            }\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n    }\n    slice[0][1]._loose = loose;\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   */\n  function setData(key, value) {\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\n    // if allowed.\n    data[key] = value;\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    buffers.push([]);\n  }\n\n  /** @type {CompileContext['resume']} */\n  function resume() {\n    const buf = buffers.pop();\n    return buf.join('');\n  }\n\n  /** @type {CompileContext['tag']} */\n  function tag(value) {\n    if (!tags) return;\n    setData('lastWasTag', true);\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /** @type {CompileContext['raw']} */\n  function raw(value) {\n    setData('lastWasTag');\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {undefined}\n   */\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n');\n  }\n\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1];\n    const slice = buffer[buffer.length - 1];\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null;\n    if (previous === 10 || previous === 13 || previous === null) {\n      return;\n    }\n    lineEnding();\n  }\n\n  /** @type {CompileContext['encode']} */\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value);\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @returns {undefined}\n   */\n  function onresumedrop() {\n    resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ol');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ul');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10);\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"');\n      }\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>');\n    } else {\n      onexitlistitem();\n    }\n    lineEndingIfNeeded();\n    tag('<li>');\n    setData('expectFirstItem');\n    // “Hack” to prevent a line ending from showing up if the item is empty.\n    setData('lastWasTag');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ol>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistunordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ul>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded();\n    }\n    tag('</li>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterblockquote() {\n    tightStack.push(false);\n    lineEndingIfNeeded();\n    tag('<blockquote>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitblockquote() {\n    tightStack.pop();\n    lineEndingIfNeeded();\n    tag('</blockquote>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded();\n      tag('<p>');\n    }\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true);\n    } else {\n      tag('</p>');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodefenced() {\n    lineEndingIfNeeded();\n    tag('<pre><code');\n    setData('fencesCount', 0);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const value = resume();\n    tag(' class=\"language-' + value + '\"');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0;\n    if (!count) {\n      tag('>');\n      setData('slurpOneLineEnding', true);\n    }\n    setData('fencesCount', count + 1);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodeindented() {\n    lineEndingIfNeeded();\n    tag('<pre><code>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitflowcode() {\n    const count = getData('fencesCount');\n\n    // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n    if (count !== undefined && count < 2 && data.tightStack.length > 0 && !getData('lastWasTag')) {\n      lineEnding();\n    }\n\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded();\n    }\n    tag('</code></pre>');\n    if (count !== undefined && count < 2) lineEndingIfNeeded();\n    setData('flowCodeSeenData');\n    setData('fencesCount');\n    setData('slurpOneLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    });\n    tags = undefined; // Disallow tags.\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlink() {\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresource() {\n    buffer(); // We can have line endings in the resource, ignore them.\n    mediaStack[mediaStack.length - 1].destination = '';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresourcedestinationstring() {\n    buffer();\n    // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitmedia() {\n    let index = mediaStack.length - 1; // Skip current.\n    const media = mediaStack[index];\n    const id = media.referenceId || media.labelId;\n    const context = media.destination === undefined ? definitions[normalizeIdentifier(id)] : media;\n    tags = true;\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined;\n        break;\n      }\n    }\n    if (media.image) {\n      tag('<img src=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolSource) + '\" alt=\"');\n      raw(media.label);\n      tag('\"');\n    } else {\n      tag('<a href=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolHref) + '\"');\n    }\n    tag(context.title ? ' title=\"' + context.title + '\"' : '');\n    if (media.image) {\n      tag(' />');\n    } else {\n      tag('>');\n      raw(media.label);\n      tag('</a>');\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinition() {\n    buffer();\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume();\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinitiondestinationstring() {\n    buffer();\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1];\n    const id = normalizeIdentifier(media.labelId);\n    resume();\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1];\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercontent() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return;\n    setData('headingRank', this.sliceSerialize(token).length);\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentersetextheading() {\n    buffer();\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    setData('headingRank', this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    const value = resume();\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n    raw(value);\n    tag('</h' + getData('headingRank') + '>');\n    setData('slurpAllLineEndings');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return;\n    }\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding');\n      return;\n    }\n    if (getData('inCodeText')) {\n      raw(' ');\n      return;\n    }\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)));\n    setData('flowCodeSeenData', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexithardbreak() {\n    tag('<br />');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtmlflow() {\n    lineEndingIfNeeded();\n    onenterhtml();\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexithtml() {\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtml() {\n    if (settings.allowDangerousHtml) {\n      setData('ignoreEncode', true);\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenteremphasis() {\n    tag('<em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterstrong() {\n    tag('<strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onentercodetext() {\n    setData('inCodeText', true);\n    tag('<code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitcodetext() {\n    setData('inCodeText');\n    tag('</code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitemphasis() {\n    tag('</em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitstrong() {\n    tag('</strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitthematicbreak() {\n    lineEndingIfNeeded();\n    tag('<hr />');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @param {Token} token\n   * @returns {undefined}\n   */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const value = this.sliceSerialize(token);\n    const decoded = getData('characterReferenceType') ? decodeNumericCharacterReference(value, getData('characterReferenceType') === \"characterReferenceMarkerNumeric\" ? 10 : 16) : decodeNamedCharacterReference(value);\n\n    // `decodeNamedCharacterReference` can return `false` for invalid named\n    // character references,\n    // but everything we’ve tokenized is valid.\n    raw(encode(/** @type {string} */decoded));\n    setData('characterReferenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri(uri, settings.allowDangerousProtocol ? undefined : protocolHref) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n}","map":{"version":3,"names":["decodeNamedCharacterReference","push","combineHtmlExtensions","decodeNumericCharacterReference","encode","_encode","normalizeIdentifier","sanitizeUri","hasOwnProperty","protocolHref","protocolSource","compile","options","settings","tags","definitions","buffers","mediaStack","tightStack","defaultHandlers","enter","blockQuote","onenterblockquote","codeFenced","onentercodefenced","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","onentercodeindented","codeText","onentercodetext","content","onentercontent","definition","onenterdefinition","definitionDestinationString","onenterdefinitiondestinationstring","definitionLabelString","definitionTitleString","emphasis","onenteremphasis","htmlFlow","onenterhtmlflow","htmlText","onenterhtml","image","onenterimage","label","link","onenterlink","listItemMarker","onenterlistitemmarker","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","onenterlistunordered","paragraph","onenterparagraph","reference","resource","onenterresource","resourceDestinationString","onenterresourcedestinationstring","resourceTitleString","setextHeading","onentersetextheading","strong","onenterstrong","exit","atxHeading","onexitatxheading","atxHeadingSequence","onexitatxheadingsequence","autolinkEmail","onexitautolinkemail","autolinkProtocol","onexitautolinkprotocol","onexitblockquote","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitflowcode","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onresumedrop","codeFlowValue","onexitcodeflowvalue","onexitcodetext","codeTextData","data","onexitdefinition","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexitemphasis","hardBreakEscape","onexithardbreak","hardBreakTrailing","onexithtml","htmlFlowData","htmlTextData","onexitmedia","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlistordered","onexitlistunordered","onexitparagraph","referenceString","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","onexitstrong","thematicBreak","onexitthematicbreak","handlers","htmlExtensions","context","getData","lineEndingIfNeeded","raw","resume","setData","tag","lineEndingStyle","defaultLineEnding","events","index","start","listStack","head","body","length","type","sliceSerialize","prepareList","slice","pop","result","null","call","handles","kind","handle","_objectSpread","join","containerBalance","loose","atMarker","event","_container","undefined","_loose","key","value","buf","previous","charCodeAt","token","Number","parseInt","String","onexitlistitem","count","labelId","referenceId","destination","title","media","id","allowDangerousProtocol","allowDangerousHtml","decoded","uri"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/micromark/lib/compile.js"],"sourcesContent":["/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @import {\n *   CompileContext,\n *   CompileData,\n *   CompileOptions,\n *   Compile,\n *   Definition,\n *   Event,\n *   Handle,\n *   HtmlExtension,\n *   LineEnding,\n *   NormalizedHtmlExtension,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef Media\n * @property {boolean | undefined} [image]\n * @property {string | undefined} [labelId]\n * @property {string | undefined} [label]\n * @property {string | undefined} [referenceId]\n * @property {string | undefined} [destination]\n * @property {string | undefined} [title]\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { push } from 'micromark-util-chunked';\nimport { combineHtmlExtensions } from 'micromark-util-combine-extensions';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { encode as _encode } from 'micromark-util-encode';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i;\nconst protocolSource = /^https?$/i;\n\n/**\n * @param {CompileOptions | null | undefined} [options]\n * @returns {Compile}\n */\nexport function compile(options) {\n  const settings = options || {};\n\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean | undefined}\n   */\n  let tags = true;\n\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n  const definitions = {};\n\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n  const buffers = [[]];\n\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n  const mediaStack = [];\n\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n  const tightStack = [];\n\n  /** @type {HtmlExtension} */\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onresumedrop,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: onresumedrop,\n      referenceString: onexitreferencestring,\n      resource: onresumedrop,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  };\n\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   */\n  const handlers = /** @type {NormalizedHtmlExtension} */\n  combineHtmlExtensions([defaultHandlers, ...(settings.htmlExtensions || [])]);\n\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n  const data = {\n    definitions,\n    tightStack\n  };\n\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n  const context = {\n    buffer,\n    encode,\n    getData,\n    lineEndingIfNeeded,\n    options: settings,\n    raw,\n    resume,\n    setData,\n    tag\n  };\n\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n  let lineEndingStyle = settings.defaultLineEnding;\n\n  // Return the function that handles a slice of events.\n  return compile;\n\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {ReadonlyArray<Event>} events\n   * @returns {string}\n   */\n  function compile(events) {\n    let index = -1;\n    let start = 0;\n    /** @type {Array<number>} */\n    const listStack = [];\n    // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n    /** @type {Array<Event>} */\n    let head = [];\n    /** @type {Array<Event>} */\n    let body = [];\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (!lineEndingStyle && (events[index][1].type === \"lineEnding\" || events[index][1].type === \"lineEndingBlank\")) {\n        lineEndingStyle = /** @type {LineEnding} */\n        events[index][2].sliceSerialize(events[index][1]);\n      }\n\n      // Preprocess lists to infer whether the list is loose or not.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          prepareList(events.slice(listStack.pop(), index));\n        }\n      }\n\n      // Move definitions to the front.\n      if (events[index][1].type === \"definition\") {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index));\n          start = index;\n        } else {\n          head = push(head, events.slice(start, index + 1));\n          start = index + 1;\n        }\n      }\n    }\n    head = push(head, body);\n    head = push(head, events.slice(start));\n    index = -1;\n    const result = head;\n\n    // Handle the start of the document, if defined.\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context);\n    }\n\n    // Handle all events.\n    while (++index < events.length) {\n      const handles = handlers[result[index][0]];\n      const kind = result[index][1].type;\n      const handle = handles[kind];\n      if (hasOwnProperty.call(handles, kind) && handle) {\n        handle.call({\n          sliceSerialize: result[index][2].sliceSerialize,\n          ...context\n        }, result[index][1]);\n      }\n    }\n\n    // Handle the end of the document, if defined.\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context);\n    }\n    return buffers[0].join('');\n  }\n\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {ReadonlyArray<Event>} slice\n   * @returns {undefined}\n   */\n  function prepareList(slice) {\n    const length = slice.length;\n    let index = 0; // Skip open.\n    let containerBalance = 0;\n    let loose = false;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index < length) {\n      const event = slice[index];\n      if (event[1]._container) {\n        atMarker = undefined;\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n      } else switch (event[1].type) {\n        case \"listItemPrefix\":\n          {\n            if (event[0] === 'exit') {\n              atMarker = true;\n            }\n            break;\n          }\n        case \"linePrefix\":\n          {\n            // Ignore\n\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined;\n              } else {\n                loose = true;\n              }\n            }\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n    }\n    slice[0][1]._loose = loose;\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   */\n  function setData(key, value) {\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\n    // if allowed.\n    data[key] = value;\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    buffers.push([]);\n  }\n\n  /** @type {CompileContext['resume']} */\n  function resume() {\n    const buf = buffers.pop();\n    return buf.join('');\n  }\n\n  /** @type {CompileContext['tag']} */\n  function tag(value) {\n    if (!tags) return;\n    setData('lastWasTag', true);\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /** @type {CompileContext['raw']} */\n  function raw(value) {\n    setData('lastWasTag');\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {undefined}\n   */\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n');\n  }\n\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1];\n    const slice = buffer[buffer.length - 1];\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null;\n    if (previous === 10 || previous === 13 || previous === null) {\n      return;\n    }\n    lineEnding();\n  }\n\n  /** @type {CompileContext['encode']} */\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value);\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @returns {undefined}\n   */\n  function onresumedrop() {\n    resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ol');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ul');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10);\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"');\n      }\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>');\n    } else {\n      onexitlistitem();\n    }\n    lineEndingIfNeeded();\n    tag('<li>');\n    setData('expectFirstItem');\n    // “Hack” to prevent a line ending from showing up if the item is empty.\n    setData('lastWasTag');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ol>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistunordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ul>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded();\n    }\n    tag('</li>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterblockquote() {\n    tightStack.push(false);\n    lineEndingIfNeeded();\n    tag('<blockquote>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitblockquote() {\n    tightStack.pop();\n    lineEndingIfNeeded();\n    tag('</blockquote>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded();\n      tag('<p>');\n    }\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true);\n    } else {\n      tag('</p>');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodefenced() {\n    lineEndingIfNeeded();\n    tag('<pre><code');\n    setData('fencesCount', 0);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const value = resume();\n    tag(' class=\"language-' + value + '\"');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0;\n    if (!count) {\n      tag('>');\n      setData('slurpOneLineEnding', true);\n    }\n    setData('fencesCount', count + 1);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodeindented() {\n    lineEndingIfNeeded();\n    tag('<pre><code>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitflowcode() {\n    const count = getData('fencesCount');\n\n    // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n    if (count !== undefined && count < 2 && data.tightStack.length > 0 && !getData('lastWasTag')) {\n      lineEnding();\n    }\n\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded();\n    }\n    tag('</code></pre>');\n    if (count !== undefined && count < 2) lineEndingIfNeeded();\n    setData('flowCodeSeenData');\n    setData('fencesCount');\n    setData('slurpOneLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    });\n    tags = undefined; // Disallow tags.\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlink() {\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresource() {\n    buffer(); // We can have line endings in the resource, ignore them.\n    mediaStack[mediaStack.length - 1].destination = '';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresourcedestinationstring() {\n    buffer();\n    // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitmedia() {\n    let index = mediaStack.length - 1; // Skip current.\n    const media = mediaStack[index];\n    const id = media.referenceId || media.labelId;\n    const context = media.destination === undefined ? definitions[normalizeIdentifier(id)] : media;\n    tags = true;\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined;\n        break;\n      }\n    }\n    if (media.image) {\n      tag('<img src=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolSource) + '\" alt=\"');\n      raw(media.label);\n      tag('\"');\n    } else {\n      tag('<a href=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolHref) + '\"');\n    }\n    tag(context.title ? ' title=\"' + context.title + '\"' : '');\n    if (media.image) {\n      tag(' />');\n    } else {\n      tag('>');\n      raw(media.label);\n      tag('</a>');\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinition() {\n    buffer();\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume();\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinitiondestinationstring() {\n    buffer();\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1];\n    const id = normalizeIdentifier(media.labelId);\n    resume();\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1];\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercontent() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return;\n    setData('headingRank', this.sliceSerialize(token).length);\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentersetextheading() {\n    buffer();\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    setData('headingRank', this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    const value = resume();\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n    raw(value);\n    tag('</h' + getData('headingRank') + '>');\n    setData('slurpAllLineEndings');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return;\n    }\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding');\n      return;\n    }\n    if (getData('inCodeText')) {\n      raw(' ');\n      return;\n    }\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)));\n    setData('flowCodeSeenData', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexithardbreak() {\n    tag('<br />');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtmlflow() {\n    lineEndingIfNeeded();\n    onenterhtml();\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexithtml() {\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtml() {\n    if (settings.allowDangerousHtml) {\n      setData('ignoreEncode', true);\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenteremphasis() {\n    tag('<em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterstrong() {\n    tag('<strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onentercodetext() {\n    setData('inCodeText', true);\n    tag('<code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitcodetext() {\n    setData('inCodeText');\n    tag('</code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitemphasis() {\n    tag('</em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitstrong() {\n    tag('</strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitthematicbreak() {\n    lineEndingIfNeeded();\n    tag('<hr />');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @param {Token} token\n   * @returns {undefined}\n   */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const value = this.sliceSerialize(token);\n    const decoded = getData('characterReferenceType') ? decodeNumericCharacterReference(value, getData('characterReferenceType') === \"characterReferenceMarkerNumeric\" ? 10 : 16) : decodeNamedCharacterReference(value);\n\n    // `decodeNamedCharacterReference` can return `false` for invalid named\n    // character references,\n    // but everything we’ve tokenized is valid.\n    raw(encode(/** @type {string} */decoded));\n    setData('characterReferenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri(uri, settings.allowDangerousProtocol ? undefined : protocolHref) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}