{"ast":null,"code":"/**\n * @import {Parents, RootContent} from 'hast'\n */\n\nimport { whitespace } from 'hast-util-whitespace';\nexport const siblingAfter = siblings(1);\nexport const siblingBefore = siblings(-1);\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = [];\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling;\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren;\n    let offset = (index || 0) + increment;\n    let next = siblings[offset];\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment;\n        next = siblings[offset];\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next;\n  }\n}","map":{"version":3,"names":["whitespace","siblingAfter","siblings","siblingBefore","emptyChildren","increment","sibling","parent","index","includeWhitespace","children","offset","next"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/hast-util-to-html/lib/omission/util/siblings.js"],"sourcesContent":["/**\n * @import {Parents, RootContent} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,UAAU,QAAO,sBAAsB;AAE/C,OAAO,MAAMC,YAAY,GAAGC,QAAQ,CAAC,CAAC,CAAC;AACvC,OAAO,MAAMC,aAAa,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEzC;AACA,MAAME,aAAa,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA,SAASF,QAAQA,CAACG,SAAS,EAAE;EAC3B,OAAOC,OAAO;;EAEd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,OAAOA,CAACC,MAAM,EAAEC,KAAK,EAAEC,iBAAiB,EAAE;IACjD,MAAMP,QAAQ,GAAGK,MAAM,GAAGA,MAAM,CAACG,QAAQ,GAAGN,aAAa;IACzD,IAAIO,MAAM,GAAG,CAACH,KAAK,IAAI,CAAC,IAAIH,SAAS;IACrC,IAAIO,IAAI,GAAGV,QAAQ,CAACS,MAAM,CAAC;IAE3B,IAAI,CAACF,iBAAiB,EAAE;MACtB,OAAOG,IAAI,IAAIZ,UAAU,CAACY,IAAI,CAAC,EAAE;QAC/BD,MAAM,IAAIN,SAAS;QACnBO,IAAI,GAAGV,QAAQ,CAACS,MAAM,CAAC;MACzB;IACF;;IAEA;IACA,OAAOC,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}