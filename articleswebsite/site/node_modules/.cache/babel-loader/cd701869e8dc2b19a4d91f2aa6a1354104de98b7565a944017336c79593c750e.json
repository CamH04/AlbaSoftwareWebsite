{"ast":null,"code":"import { characterEntitiesLegacy } from 'character-entities-legacy';\nimport { characterEntitiesHtml4 } from 'character-entities-html4';\nimport { dangerous } from '../constant/dangerous.js';\nconst own = {}.hasOwnProperty;\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {};\n\n/** @type {string} */\nlet key;\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\nconst notAlphanumericRegex = /[^\\dA-Za-z]/;\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n  if (own.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n    if (omit && characterEntitiesLegacy.includes(name) && !dangerous.includes(name) && (!attribute || next && next !== 61 /* `=` */ && notAlphanumericRegex.test(String.fromCharCode(next)))) {\n      return value;\n    }\n    return value + ';';\n  }\n  return '';\n}","map":{"version":3,"names":["characterEntitiesLegacy","characterEntitiesHtml4","dangerous","own","hasOwnProperty","characters","key","call","notAlphanumericRegex","toNamed","code","next","omit","attribute","character","String","fromCharCode","name","value","includes","test"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/stringify-entities/lib/util/to-named.js"],"sourcesContent":["import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\nconst notAlphanumericRegex = /[^\\dA-Za-z]/\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          notAlphanumericRegex.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n"],"mappings":"AAAA,SAAQA,uBAAuB,QAAO,2BAA2B;AACjE,SAAQC,sBAAsB,QAAO,0BAA0B;AAC/D,SAAQC,SAAS,QAAO,0BAA0B;AAElD,MAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CAAC,CAAC;;AAErB;AACA,IAAIC,GAAG;AAEP,KAAKA,GAAG,IAAIL,sBAAsB,EAAE;EAClC,IAAIE,GAAG,CAACI,IAAI,CAACN,sBAAsB,EAAEK,GAAG,CAAC,EAAE;IACzCD,UAAU,CAACJ,sBAAsB,CAACK,GAAG,CAAC,CAAC,GAAGA,GAAG;EAC/C;AACF;AAEA,MAAME,oBAAoB,GAAG,aAAa;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAE;EACnD,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAACN,IAAI,CAAC;EAE3C,IAAIP,GAAG,CAACI,IAAI,CAACF,UAAU,EAAES,SAAS,CAAC,EAAE;IACnC,MAAMG,IAAI,GAAGZ,UAAU,CAACS,SAAS,CAAC;IAClC,MAAMI,KAAK,GAAG,GAAG,GAAGD,IAAI;IAExB,IACEL,IAAI,IACJZ,uBAAuB,CAACmB,QAAQ,CAACF,IAAI,CAAC,IACtC,CAACf,SAAS,CAACiB,QAAQ,CAACF,IAAI,CAAC,KACxB,CAACJ,SAAS,IACRF,IAAI,IACHA,IAAI,KAAK,EAAE,CAAC,aACZH,oBAAoB,CAACY,IAAI,CAACL,MAAM,CAACC,YAAY,CAACL,IAAI,CAAC,CAAE,CAAC,EAC1D;MACA,OAAOO,KAAK;IACd;IAEA,OAAOA,KAAK,GAAG,GAAG;EACpB;EAEA,OAAO,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}