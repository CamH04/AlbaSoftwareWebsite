{"ast":null,"code":"import _objectSpread from \"/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = _objectSpread({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = _objectSpread({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","splice","document","tokenize","initializeDocument","containerConstruct","tokenizeContainer","effects","self","stack","continued","childFlow","childToken","lineStartOffset","start","code","length","item","containerState","attempt","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","indexBeforeFlow","point","type","end","exitContainers","index","_objectSpread","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","thereIsANewContainer","thereIsNoNewContainer","parser","lazy","now","line","offset","containerContinue","push","consume","flow","enter","_tokenizer","contentType","previous","flowContinue","writeToChild","exit","token","endOfFile","stream","sliceStream","next","defineSkip","write","seen","size","entry","call","ok","nok","constructs","disable","null","includes"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/micromark/lib/initialize/document.js"],"sourcesContent":["/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}