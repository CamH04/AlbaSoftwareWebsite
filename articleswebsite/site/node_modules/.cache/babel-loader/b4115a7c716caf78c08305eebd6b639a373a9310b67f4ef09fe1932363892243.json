{"ast":null,"code":"/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","lineStart","token","contentType","next","data"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/micromark/lib/initialize/content.js"],"sourcesContent":["/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,OAAO,EAAE;EAClC,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAO,CAAC,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,cAAc,EAAEC,0BAA0B,EAAEC,gBAAgB,CAAC;EACzH;EACA,IAAIC,QAAQ;EACZ,OAAOP,YAAY;;EAEnB;EACA,SAASK,0BAA0BA,CAACG,IAAI,EAAE;IACxC,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACAT,OAAO,CAACW,KAAK,CAAC,YAAY,CAAC;IAC3BX,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrBT,OAAO,CAACY,IAAI,CAAC,YAAY,CAAC;IAC1B,OAAOjB,YAAY,CAACK,OAAO,EAAEC,YAAY,EAAE,YAAY,CAAC;EAC1D;;EAEA;EACA,SAASM,gBAAgBA,CAACE,IAAI,EAAE;IAC9BT,OAAO,CAACW,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAOE,SAAS,CAACJ,IAAI,CAAC;EACxB;;EAEA;EACA,SAASI,SAASA,CAACJ,IAAI,EAAE;IACvB,MAAMK,KAAK,GAAGd,OAAO,CAACW,KAAK,CAAC,WAAW,EAAE;MACvCI,WAAW,EAAE,MAAM;MACnBP;IACF,CAAC,CAAC;IACF,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAACQ,IAAI,GAAGF,KAAK;IACvB;IACAN,QAAQ,GAAGM,KAAK;IAChB,OAAOG,IAAI,CAACR,IAAI,CAAC;EACnB;;EAEA;EACA,SAASQ,IAAIA,CAACR,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzBZ,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzBZ,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACA,IAAIb,kBAAkB,CAACa,IAAI,CAAC,EAAE;MAC5BT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrBT,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzB,OAAOC,SAAS;IAClB;;IAEA;IACAb,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrB,OAAOQ,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}