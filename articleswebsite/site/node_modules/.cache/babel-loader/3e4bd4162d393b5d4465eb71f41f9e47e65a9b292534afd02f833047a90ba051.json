{"ast":null,"code":"/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport { whitespace } from 'hast-util-whitespace';\nimport { siblingAfter } from './util/siblings.js';\nimport { omission } from './omission.js';\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n});\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true);\n  return !next || next.type !== 'comment' && !(next.type === 'text' && whitespace(next.value.charAt(0)));\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment';\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment';\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return next ? next.type === 'element' && (next.tagName === 'address' || next.tagName === 'article' || next.tagName === 'aside' || next.tagName === 'blockquote' || next.tagName === 'details' || next.tagName === 'div' || next.tagName === 'dl' || next.tagName === 'fieldset' || next.tagName === 'figcaption' || next.tagName === 'figure' || next.tagName === 'footer' || next.tagName === 'form' || next.tagName === 'h1' || next.tagName === 'h2' || next.tagName === 'h3' || next.tagName === 'h4' || next.tagName === 'h5' || next.tagName === 'h6' || next.tagName === 'header' || next.tagName === 'hgroup' || next.tagName === 'hr' || next.tagName === 'main' || next.tagName === 'menu' || next.tagName === 'nav' || next.tagName === 'ol' || next.tagName === 'p' || next.tagName === 'pre' || next.tagName === 'section' || next.tagName === 'table' || next.tagName === 'ul') : !parent ||\n  // Confusing parent.\n  !(parent.type === 'element' && (parent.tagName === 'a' || parent.tagName === 'audio' || parent.tagName === 'del' || parent.tagName === 'ins' || parent.tagName === 'map' || parent.tagName === 'noscript' || parent.tagName === 'video'));\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && next.tagName === 'li';\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(next && next.type === 'element' && (next.tagName === 'dt' || next.tagName === 'dd'));\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && (next.tagName === 'dt' || next.tagName === 'dd');\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && (next.tagName === 'rp' || next.tagName === 'rt');\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && next.tagName === 'optgroup';\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && (next.tagName === 'option' || next.tagName === 'optgroup');\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(next && next.type === 'element' && (next.tagName === 'tbody' || next.tagName === 'tfoot'));\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && (next.tagName === 'tbody' || next.tagName === 'tfoot');\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index);\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && next.tagName === 'tr';\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type === 'element' && (next.tagName === 'td' || next.tagName === 'th');\n}","map":{"version":3,"names":["whitespace","siblingAfter","omission","closing","body","caption","headOrColgroupOrCaption","colgroup","dd","dt","head","html","li","optgroup","option","p","rp","rubyElement","rt","tbody","td","cells","tfoot","th","thead","tr","_","index","parent","next","type","value","charAt","tagName","Boolean"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/hast-util-to-html/lib/omission/closing.js"],"sourcesContent":["/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,UAAU,QAAO,sBAAsB;AAC/C,SAAQC,YAAY,QAAO,oBAAoB;AAC/C,SAAQC,QAAQ,QAAO,eAAe;AAEtC,OAAO,MAAMC,OAAO,GAAGD,QAAQ,CAAC;EAC9BE,IAAI;EACJC,OAAO,EAAEC,uBAAuB;EAChCC,QAAQ,EAAED,uBAAuB;EACjCE,EAAE;EACFC,EAAE;EACFC,IAAI,EAAEJ,uBAAuB;EAC7BK,IAAI;EACJC,EAAE;EACFC,QAAQ;EACRC,MAAM;EACNC,CAAC;EACDC,EAAE,EAAEC,WAAW;EACfC,EAAE,EAAED,WAAW;EACfE,KAAK;EACLC,EAAE,EAAEC,KAAK;EACTC,KAAK;EACLC,EAAE,EAAEF,KAAK;EACTG,KAAK;EACLC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASnB,uBAAuBA,CAACoB,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACjD,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,EAAE,IAAI,CAAC;EAC9C,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,IACtB,EAAED,IAAI,CAACC,IAAI,KAAK,MAAM,IAAI9B,UAAU,CAAC6B,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAE;AAElE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrB,IAAIA,CAACe,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC9B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAO,CAACE,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS1B,IAAIA,CAACsB,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC9B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAO,CAACE,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASf,CAACA,CAACW,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC3B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAOE,IAAI,GACPA,IAAI,CAACC,IAAI,KAAK,SAAS,KACpBD,IAAI,CAACI,OAAO,KAAK,SAAS,IACzBJ,IAAI,CAACI,OAAO,KAAK,SAAS,IAC1BJ,IAAI,CAACI,OAAO,KAAK,OAAO,IACxBJ,IAAI,CAACI,OAAO,KAAK,YAAY,IAC7BJ,IAAI,CAACI,OAAO,KAAK,SAAS,IAC1BJ,IAAI,CAACI,OAAO,KAAK,KAAK,IACtBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,UAAU,IAC3BJ,IAAI,CAACI,OAAO,KAAK,YAAY,IAC7BJ,IAAI,CAACI,OAAO,KAAK,QAAQ,IACzBJ,IAAI,CAACI,OAAO,KAAK,QAAQ,IACzBJ,IAAI,CAACI,OAAO,KAAK,MAAM,IACvBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,QAAQ,IACzBJ,IAAI,CAACI,OAAO,KAAK,QAAQ,IACzBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,MAAM,IACvBJ,IAAI,CAACI,OAAO,KAAK,MAAM,IACvBJ,IAAI,CAACI,OAAO,KAAK,KAAK,IACtBJ,IAAI,CAACI,OAAO,KAAK,IAAI,IACrBJ,IAAI,CAACI,OAAO,KAAK,GAAG,IACpBJ,IAAI,CAACI,OAAO,KAAK,KAAK,IACtBJ,IAAI,CAACI,OAAO,KAAK,SAAS,IAC1BJ,IAAI,CAACI,OAAO,KAAK,OAAO,IACxBJ,IAAI,CAACI,OAAO,KAAK,IAAI,CAAC,GAC1B,CAACL,MAAM;EACL;EACA,EACEA,MAAM,CAACE,IAAI,KAAK,SAAS,KACxBF,MAAM,CAACK,OAAO,KAAK,GAAG,IACrBL,MAAM,CAACK,OAAO,KAAK,OAAO,IAC1BL,MAAM,CAACK,OAAO,KAAK,KAAK,IACxBL,MAAM,CAACK,OAAO,KAAK,KAAK,IACxBL,MAAM,CAACK,OAAO,KAAK,KAAK,IACxBL,MAAM,CAACK,OAAO,KAAK,UAAU,IAC7BL,MAAM,CAACK,OAAO,KAAK,OAAO,CAAC,CAC9B;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrB,EAAEA,CAACc,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC5B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAO,CAACE,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,SAAS,IAAID,IAAI,CAACI,OAAO,KAAK,IAAK;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASxB,EAAEA,CAACiB,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC5B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAOO,OAAO,CACZL,IAAI,IACFA,IAAI,CAACC,IAAI,KAAK,SAAS,KACtBD,IAAI,CAACI,OAAO,KAAK,IAAI,IAAIJ,IAAI,CAACI,OAAO,KAAK,IAAI,CACnD,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASzB,EAAEA,CAACkB,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC5B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,KACrBD,IAAI,CAACI,OAAO,KAAK,IAAI,IAAIJ,IAAI,CAACI,OAAO,KAAK,IAAI,CAAE;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAShB,WAAWA,CAACS,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACrC,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,KACrBD,IAAI,CAACI,OAAO,KAAK,IAAI,IAAIJ,IAAI,CAACI,OAAO,KAAK,IAAI,CAAE;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASpB,QAAQA,CAACa,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAClC,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAO,CAACE,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,SAAS,IAAID,IAAI,CAACI,OAAO,KAAK,UAAW;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASnB,MAAMA,CAACY,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAChC,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,KACrBD,IAAI,CAACI,OAAO,KAAK,QAAQ,IAAIJ,IAAI,CAACI,OAAO,KAAK,UAAU,CAAE;AAEjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAST,KAAKA,CAACE,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC/B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAOO,OAAO,CACZL,IAAI,IACFA,IAAI,CAACC,IAAI,KAAK,SAAS,KACtBD,IAAI,CAACI,OAAO,KAAK,OAAO,IAAIJ,IAAI,CAACI,OAAO,KAAK,OAAO,CACzD,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASd,KAAKA,CAACO,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC/B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,KACrBD,IAAI,CAACI,OAAO,KAAK,OAAO,IAAIJ,IAAI,CAACI,OAAO,KAAK,OAAO,CAAE;AAE7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASX,KAAKA,CAACI,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC/B,OAAO,CAAC3B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,EAAEA,CAACC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC5B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OAAO,CAACE,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,SAAS,IAAID,IAAI,CAACI,OAAO,KAAK,IAAK;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,KAAKA,CAACK,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC/B,MAAMC,IAAI,GAAG5B,YAAY,CAAC2B,MAAM,EAAED,KAAK,CAAC;EACxC,OACE,CAACE,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,SAAS,KACrBD,IAAI,CAACI,OAAO,KAAK,IAAI,IAAIJ,IAAI,CAACI,OAAO,KAAK,IAAI,CAAE;AAEvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}