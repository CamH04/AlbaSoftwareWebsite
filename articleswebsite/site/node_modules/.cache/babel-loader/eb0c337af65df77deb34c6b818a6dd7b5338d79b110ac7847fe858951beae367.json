{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek;\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType;\n  const exit = state.enter('imageReference');\n  let subexit = state.enter('label');\n  const tracker = state.createTracker(info);\n  let value = tracker.move('![');\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  });\n  value += tracker.move(alt + '][');\n  subexit();\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack;\n  state.stack = [];\n  subexit = state.enter('reference');\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  });\n  subexit();\n  state.stack = stack;\n  exit();\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']');\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1);\n  } else {\n    value += tracker.move(']');\n  }\n  return value;\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!';\n}","map":{"version":3,"names":["imageReference","peek","imageReferencePeek","node","_","state","info","type","referenceType","exit","enter","subexit","tracker","createTracker","value","move","alt","safe","before","after","current","stack","reference","associationId","slice"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js"],"sourcesContent":["/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEAA,cAAc,CAACC,IAAI,GAAGC,kBAAkB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,cAAcA,CAACG,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACnD,MAAMC,IAAI,GAAGJ,IAAI,CAACK,aAAa;EAC/B,MAAMC,IAAI,GAAGJ,KAAK,CAACK,KAAK,CAAC,gBAAgB,CAAC;EAC1C,IAAIC,OAAO,GAAGN,KAAK,CAACK,KAAK,CAAC,OAAO,CAAC;EAClC,MAAME,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAACP,IAAI,CAAC;EACzC,IAAIQ,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;EAC9B,MAAMC,GAAG,GAAGX,KAAK,CAACY,IAAI,CAACd,IAAI,CAACa,GAAG,EAAE;IAC/BE,MAAM,EAAEJ,KAAK;IACbK,KAAK,EAAE,GAAG;IACV,GAAGP,OAAO,CAACQ,OAAO,CAAC;EACrB,CAAC,CAAC;EACFN,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC;EAEjCL,OAAO,CAAC,CAAC;EACT;EACA,MAAMU,KAAK,GAAGhB,KAAK,CAACgB,KAAK;EACzBhB,KAAK,CAACgB,KAAK,GAAG,EAAE;EAChBV,OAAO,GAAGN,KAAK,CAACK,KAAK,CAAC,WAAW,CAAC;EAClC;EACA;EACA;EACA;EACA,MAAMY,SAAS,GAAGjB,KAAK,CAACY,IAAI,CAACZ,KAAK,CAACkB,aAAa,CAACpB,IAAI,CAAC,EAAE;IACtDe,MAAM,EAAEJ,KAAK;IACbK,KAAK,EAAE,GAAG;IACV,GAAGP,OAAO,CAACQ,OAAO,CAAC;EACrB,CAAC,CAAC;EACFT,OAAO,CAAC,CAAC;EACTN,KAAK,CAACgB,KAAK,GAAGA,KAAK;EACnBZ,IAAI,CAAC,CAAC;EAEN,IAAIF,IAAI,KAAK,MAAM,IAAI,CAACS,GAAG,IAAIA,GAAG,KAAKM,SAAS,EAAE;IAChDR,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACO,SAAS,GAAG,GAAG,CAAC;EACxC,CAAC,MAAM,IAAIf,IAAI,KAAK,UAAU,EAAE;IAC9B;IACAO,KAAK,GAAGA,KAAK,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5B,CAAC,MAAM;IACLV,KAAK,IAAIF,OAAO,CAACG,IAAI,CAAC,GAAG,CAAC;EAC5B;EAEA,OAAOD,KAAK;AACd;;AAEA;AACA;AACA;AACA,SAASZ,kBAAkBA,CAAA,EAAG;EAC5B,OAAO,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}