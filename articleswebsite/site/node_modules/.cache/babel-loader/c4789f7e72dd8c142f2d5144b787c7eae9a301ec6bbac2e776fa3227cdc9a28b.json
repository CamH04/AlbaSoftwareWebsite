{"ast":null,"code":"/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport { zwitch } from 'zwitch';\nimport { comment } from './comment.js';\nimport { doctype } from './doctype.js';\nimport { element } from './element.js';\nimport { raw } from './raw.js';\nimport { root } from './root.js';\nimport { text } from './text.js';\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {\n    comment,\n    doctype,\n    element,\n    raw,\n    root,\n    text\n  }\n});\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`');\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */node_;\n  throw new Error('Cannot compile unknown node `' + node.type + '`');\n}","map":{"version":3,"names":["zwitch","comment","doctype","element","raw","root","text","handle","invalid","unknown","handlers","node","Error","node_","type"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/hast-util-to-html/lib/handle/index.js"],"sourcesContent":["/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,QAAQ;AAC7B,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,GAAG,QAAO,UAAU;AAC5B,SAAQC,IAAI,QAAO,WAAW;AAC9B,SAAQC,IAAI,QAAO,WAAW;;AAE9B;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGP,MAAM,CAAC,MAAM,EAAE;EACnCQ,OAAO;EACPC,OAAO;EACPC,QAAQ,EAAE;IAACT,OAAO;IAAEC,OAAO;IAAEC,OAAO;IAAEC,GAAG;IAAEC,IAAI;IAAEC;EAAI;AACvD,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,OAAOA,CAACG,IAAI,EAAE;EACrB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,GAAGD,IAAI,GAAG,GAAG,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACI,KAAK,EAAE;EACtB;EACA,MAAMF,IAAI,GAAG,oBAAsBE,KAAM;EACzC,MAAM,IAAID,KAAK,CAAC,+BAA+B,GAAGD,IAAI,CAACG,IAAI,GAAG,GAAG,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}