{"ast":null,"code":"/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport { ccount } from 'ccount';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { find, svg } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringifyEntities } from 'stringify-entities';\nimport { closing } from '../omission/closing.js';\nimport { opening } from '../omission/opening.js';\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [[\"&'\".split(''), '\"&\\'`'.split('')], [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [['\"&'.split(''), '\"&\\'`'.split('')], ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]]\n};\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing = schema.space === 'svg' ? state.settings.closeEmptyElements : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n  const attributes = serializeAttributes(state, node.properties);\n  const content = state.all(schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  state.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false;\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '');\n    if (selfClosing && (schema.space === 'svg' || state.settings.closeSelfClosing)) {\n      last = attributes.charAt(attributes.length - 1);\n      if (!state.settings.tightSelfClosing || last === '/' || last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n      parts.push('/');\n    }\n    parts.push('>');\n  }\n  parts.push(content);\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n  return parts.join('');\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes ? values[index].charAt(values[index].length - 1) : undefined;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n  return values.join('');\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key);\n  const x = state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n  let result;\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if ((info.boolean || info.overloadedBoolean) && (typeof value !== 'string' || value === info.attribute || value === '')) {\n    value = Boolean(value);\n  }\n  if (value === null || value === undefined || value === false || typeof value === 'number' && Number.isNaN(value)) {\n    return '';\n  }\n  const name = stringifyEntities(info.attribute, Object.assign({}, state.settings.characterReferences, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[x][y]\n  }));\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name;\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value) ? (info.commaSeparated ? commas : spaces)(value, {\n    padLeft: !state.settings.tightCommaSeparatedLists\n  }) : String(value);\n  if (state.settings.collapseEmptyAttributes && !value) return name;\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(value, Object.assign({}, state.settings.characterReferences, {\n      attribute: true,\n      subset: constants.unquoted[x][y]\n    }));\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (state.settings.quoteSmart && ccount(value, quote) > ccount(value, state.alternative)) {\n      quote = state.alternative;\n    }\n    result = quote + stringifyEntities(value, Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n      attribute: true\n    })) + quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"names":["ccount","stringify","commas","find","svg","spaces","stringifyEntities","closing","opening","constants","name","split","unquoted","single","double","element","node","index","parent","state","schema","omit","space","settings","omitOptionalTags","selfClosing","closeEmptyElements","voids","includes","tagName","toLowerCase","parts","last","attributes","serializeAttributes","properties","content","all","push","closeSelfClosing","charAt","length","tightSelfClosing","join","values","key","undefined","value","serializeAttribute","tightAttributes","info","x","allowParseErrors","y","allowDangerousCharacters","quote","result","overloadedBoolean","attribute","boolean","Boolean","Number","isNaN","Object","assign","characterReferences","subset","Array","isArray","commaSeparated","padLeft","tightCommaSeparatedLists","String","collapseEmptyAttributes","preferUnquoted","quoteSmart","alternative"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/hast-util-to-html/lib/handle/element.js"],"sourcesContent":["/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {find, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {closing} from '../omission/closing.js'\nimport {opening} from '../omission/opening.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attributes = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    (info.boolean || info.overloadedBoolean) &&\n    (typeof value !== 'string' || value === info.attribute || value === '')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}