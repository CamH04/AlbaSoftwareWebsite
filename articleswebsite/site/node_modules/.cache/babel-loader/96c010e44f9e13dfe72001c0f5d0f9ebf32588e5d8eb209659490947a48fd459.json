{"ast":null,"code":"/**\n * @import {SafeConfig, State} from 'mdast-util-to-markdown'\n */\n\nimport { encodeCharacterReference } from './encode-character-reference.js';\nimport { patternInScope } from './pattern-in-scope.js';\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '');\n  /** @type {Array<number>} */\n  const positions = [];\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {};\n  let index = -1;\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index];\n    if (!patternInScope(state.stack, pattern)) {\n      continue;\n    }\n    const expression = state.compilePattern(pattern);\n    /** @type {RegExpExecArray | null} */\n    let match;\n    while (match = expression.exec(value)) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak);\n      const after = 'after' in pattern;\n      const position = match.index + (before ? match[1].length : 0);\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false;\n        }\n        if (infos[position].after && !after) {\n          infos[position].after = false;\n        }\n      } else {\n        positions.push(position);\n        infos[position] = {\n          before,\n          after\n        };\n      }\n    }\n  }\n  positions.sort(numerical);\n  let start = config.before ? config.before.length : 0;\n  const end = value.length - (config.after ? config.after.length : 0);\n  index = -1;\n  while (++index < positions.length) {\n    const position = positions[index];\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue;\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (position + 1 < end && positions[index + 1] === position + 1 && infos[position].after && !infos[position + 1].before && !infos[position + 1].after || positions[index - 1] === position - 1 && infos[position].before && !infos[position - 1].before && !infos[position - 1].after) {\n      continue;\n    }\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'));\n    }\n    start = position;\n    if (/[!-/:-@[-`{-~]/.test(value.charAt(position)) && (!config.encode || !config.encode.includes(value.charAt(position)))) {\n      // Character escape.\n      result.push('\\\\');\n    } else {\n      // Character reference.\n      result.push(encodeCharacterReference(value.charCodeAt(position)));\n      start++;\n    }\n  }\n  result.push(escapeBackslashes(value.slice(start, end), config.after));\n  return result.join('');\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b;\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g;\n  /** @type {Array<number>} */\n  const positions = [];\n  /** @type {Array<string>} */\n  const results = [];\n  const whole = value + after;\n  let index = -1;\n  let start = 0;\n  /** @type {RegExpExecArray | null} */\n  let match;\n  while (match = expression.exec(whole)) {\n    positions.push(match.index);\n  }\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]));\n    }\n    results.push('\\\\');\n    start = positions[index];\n  }\n  results.push(value.slice(start));\n  return results.join('');\n}","map":{"version":3,"names":["encodeCharacterReference","patternInScope","safe","state","input","config","value","before","after","positions","result","infos","index","unsafe","length","pattern","stack","expression","compilePattern","match","exec","Boolean","atBreak","position","includes","push","sort","numerical","start","end","escapeBackslashes","slice","test","charAt","encode","charCodeAt","join","a","b","results","whole"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/mdast-util-to-markdown/lib/util/safe.js"],"sourcesContent":["/**\n * @import {SafeConfig, State} from 'mdast-util-to-markdown'\n */\n\nimport {encodeCharacterReference} from './encode-character-reference.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(encodeCharacterReference(value.charCodeAt(position)))\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}