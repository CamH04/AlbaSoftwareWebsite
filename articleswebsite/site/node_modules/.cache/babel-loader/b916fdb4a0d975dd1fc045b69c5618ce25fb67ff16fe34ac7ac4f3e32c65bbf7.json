{"ast":null,"code":"/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport { classifyCharacter } from 'micromark-util-classify-character';\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside);\n  const insideKind = classifyCharacter(inside);\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined ?\n    // Letter inside:\n    // we have to encode *both* letters for `_` as it is looser.\n    // it already forms for `*` (and GFMs `~`).\n    marker === '_' ? {\n      inside: true,\n      outside: true\n    } : {\n      inside: false,\n      outside: false\n    } : insideKind === 1 ?\n    // Whitespace inside: encode both (letter, whitespace).\n    {\n      inside: true,\n      outside: true\n    } :\n    // Punctuation inside: encode outer (letter)\n    {\n      inside: false,\n      outside: true\n    };\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined ?\n    // Letter inside: already forms.\n    {\n      inside: false,\n      outside: false\n    } : insideKind === 1 ?\n    // Whitespace inside: encode both (whitespace).\n    {\n      inside: true,\n      outside: true\n    } :\n    // Punctuation inside: already forms.\n    {\n      inside: false,\n      outside: false\n    };\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined ?\n  // Letter inside: already forms.\n  {\n    inside: false,\n    outside: false\n  } : insideKind === 1 ?\n  // Whitespace inside: encode inner (whitespace).\n  {\n    inside: true,\n    outside: false\n  } :\n  // Punctuation inside: already forms.\n  {\n    inside: false,\n    outside: false\n  };\n}","map":{"version":3,"names":["classifyCharacter","encodeInfo","outside","inside","marker","outsideKind","insideKind","undefined"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/mdast-util-to-markdown/lib/util/encode-info.js"],"sourcesContent":["/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,iBAAiB,QAAO,mCAAmC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAClD,MAAMC,WAAW,GAAGL,iBAAiB,CAACE,OAAO,CAAC;EAC9C,MAAMI,UAAU,GAAGN,iBAAiB,CAACG,MAAM,CAAC;;EAE5C;EACA,IAAIE,WAAW,KAAKE,SAAS,EAAE;IAC7B,OAAOD,UAAU,KAAKC,SAAS;IAC3B;IACA;IACA;IACAH,MAAM,KAAK,GAAG,GACZ;MAACD,MAAM,EAAE,IAAI;MAAED,OAAO,EAAE;IAAI,CAAC,GAC7B;MAACC,MAAM,EAAE,KAAK;MAAED,OAAO,EAAE;IAAK,CAAC,GACjCI,UAAU,KAAK,CAAC;IACd;IACA;MAACH,MAAM,EAAE,IAAI;MAAED,OAAO,EAAE;IAAI,CAAC;IAC7B;IACA;MAACC,MAAM,EAAE,KAAK;MAAED,OAAO,EAAE;IAAI,CAAC;EACtC;;EAEA;EACA,IAAIG,WAAW,KAAK,CAAC,EAAE;IACrB,OAAOC,UAAU,KAAKC,SAAS;IAC3B;IACA;MAACJ,MAAM,EAAE,KAAK;MAAED,OAAO,EAAE;IAAK,CAAC,GAC/BI,UAAU,KAAK,CAAC;IACd;IACA;MAACH,MAAM,EAAE,IAAI;MAAED,OAAO,EAAE;IAAI,CAAC;IAC7B;IACA;MAACC,MAAM,EAAE,KAAK;MAAED,OAAO,EAAE;IAAK,CAAC;EACvC;;EAEA;EACA,OAAOI,UAAU,KAAKC,SAAS;EAC3B;EACA;IAACJ,MAAM,EAAE,KAAK;IAAED,OAAO,EAAE;EAAK,CAAC,GAC/BI,UAAU,KAAK,CAAC;EACd;EACA;IAACH,MAAM,EAAE,IAAI;IAAED,OAAO,EAAE;EAAK,CAAC;EAC9B;EACA;IAACC,MAAM,EAAE,KAAK;IAAED,OAAO,EAAE;EAAK,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}