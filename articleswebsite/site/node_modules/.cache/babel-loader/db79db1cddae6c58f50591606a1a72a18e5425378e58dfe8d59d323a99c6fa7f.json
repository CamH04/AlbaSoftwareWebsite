{"ast":null,"code":"/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","map":{"version":3,"names":["markdownLineEnding","push","splice","resolveAll","createTokenizer","parser","initialize","from","point","_bufferIndex","_index","line","column","offset","columnStart","resolveAllConstructs","chunks","stack","consumed","effects","attempt","constructFactory","onsuccessfulconstruct","check","onsuccessfulcheck","consume","enter","exit","interrupt","context","code","containerState","defineSkip","events","now","previous","sliceSerialize","sliceStream","write","state","tokenize","call","expectedCode","slice","main","length","addResult","token","expandTabs","serializeChunks","sliceChunks","value","accountForPotentialSkip","chunkIndex","chunk","go","charCodeAt","undefined","type","fields","start","pop","end","construct","info","_","restore","onreturn","hook","constructs","returnState","bogusState","listOfConstructs","constructIndex","currentConstruct","Array","isArray","handleListOfConstructs","handleMapOfConstructs","map","left","all","null","list","handleConstruct","store","partial","name","disable","includes","nok","Object","assign","create","ok","resolve","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","index","result","atTab","String","fromCharCode","join"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/micromark/lib/create-tokenizer.js"],"sourcesContent":["/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}