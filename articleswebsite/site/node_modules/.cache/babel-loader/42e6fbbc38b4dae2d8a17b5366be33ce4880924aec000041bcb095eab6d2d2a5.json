{"ast":null,"code":"/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport { toHexadecimal } from './to-hexadecimal.js';\nimport { toDecimal } from './to-decimal.js';\nimport { toNamed } from './to-named.js';\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n  let named;\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(code, next, options.omitOptionalSemicolons, options.attribute);\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if ((options.useShortestReferences || !named) && options.useShortestReferences) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n  return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;\n}","map":{"version":3,"names":["toHexadecimal","toDecimal","toNamed","formatSmart","code","next","options","numeric","omitOptionalSemicolons","named","useNamedReferences","useShortestReferences","attribute","decimal","length"],"sources":["/home/cameron/Desktop/AlbaSoftwareWebsite/articleswebsite/site/node_modules/stringify-entities/lib/util/format-smart.js"],"sourcesContent":["/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,aAAa,QAAO,qBAAqB;AACjD,SAAQC,SAAS,QAAO,iBAAiB;AACzC,SAAQC,OAAO,QAAO,eAAe;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC/C,IAAIC,OAAO,GAAGP,aAAa,CAACI,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAACE,sBAAsB,CAAC;EACvE;EACA,IAAIC,KAAK;EAET,IAAIH,OAAO,CAACI,kBAAkB,IAAIJ,OAAO,CAACK,qBAAqB,EAAE;IAC/DF,KAAK,GAAGP,OAAO,CACbE,IAAI,EACJC,IAAI,EACJC,OAAO,CAACE,sBAAsB,EAC9BF,OAAO,CAACM,SACV,CAAC;EACH;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IACE,CAACN,OAAO,CAACK,qBAAqB,IAAI,CAACF,KAAK,KACxCH,OAAO,CAACK,qBAAqB,EAC7B;IACA,MAAME,OAAO,GAAGZ,SAAS,CAACG,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAACE,sBAAsB,CAAC;IAErE,IAAIK,OAAO,CAACC,MAAM,GAAGP,OAAO,CAACO,MAAM,EAAE;MACnCP,OAAO,GAAGM,OAAO;IACnB;EACF;EAEA,OAAOJ,KAAK,KACT,CAACH,OAAO,CAACK,qBAAqB,IAAIF,KAAK,CAACK,MAAM,GAAGP,OAAO,CAACO,MAAM,CAAC,GAC/DL,KAAK,GACLF,OAAO;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}